

Extent Report Introduction
--------------------------------------------------------------------------------------


<dependency>
    <groupId>com.aventstack</groupId>
    <artifactId>extentreports</artifactId>
    <version>3.1.5</version>
</dependency>









Basic Report: 

ExtentReports:


-Extenthtmlreporter--> used to create physical HTML report
         -ExtentReports-----> to capture the automation data and attach to physical file
                  -ExtentTest---> To create TC in report and capture TC status
-MediaEntityBuilder----> To attach Screenshot to report







Steps to Generate Extent Report

Step 1: Set Physical Report Path

Example Path: Right-click the project → New → Folder → Name it as "reports".

ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter("./reports/result.html");  

// To keep the history 
htmlReporter.setAppendExisting(true); 
 


Step 2: Create ExtentReports Object

ExtentReports extent = new ExtentReports(); 
 
Step 3: Attach Reporter to ExtentReports

extent.attachReporter(htmlReporter);  

Step 4: Create a Test & Assign Details

ExtentTest test1 = extent.createTest("CreateLead", "Create Lead with mandatory info");  
test1.assignCategory("Sanity");  
test1.assignAuthor("Bhuvanesh");  



Step 5: Add Test Logs (Pass/Fail Status)

test1.pass("Enter username");  
test1.pass("Enter password");  
test1.fail("Click Login button");  

Step 6: Flush the Report (Mandatory)

extent.flush();  
---------------------------------------------------------
create a unique name for report:

using LocalDateTime and DateTimeFormatter java class.

-----------------------------------------------------------------
| Pattern | Symbol Description                  | Example Output|
|---------|-------------------------------------|---------------|
| yyyy    | 4-digit year                        | 2025          |
| yy      | 2-digit year                        | 25            |
| MMMM    | Full month name                     | March         |
| MMM     | Abbreviated month name              | Mar           |
| MM      | 2-digit month (01-12)               | 03            |
| M       | Month (1-12)                        | 3 (March)     |
| dd      | 2-digit day (01-31)                 | 26            |
| d       | Day (1-31)                          | 5             |
| HH      | 2-digit hour (00-23, 24-hour format)| 18            |
| hh      | 2-digit hour (01-12, 12-hour format)| 06            |
| mm      | 2-digit minute (00-59)              | 30            |
| ss      | 2-digit second (00-59)              | 45            |
| SSS     | 3-digit millisecond                 | 789           |
| a       | AM/PM marker                        | PM            |
| E       | Day of week (short)                 | Wed           |
| EEEE    | Full day of week                    | Wednesday     |
| zzz     | Timezone abbreviation               | IST           |
| Z       | Timezone offset                     | +0530         |
-----------------------------------------------------------------
Example Combinations:

yyyy-MM-dd HH_mm_ss → 2025-03-26 18:30:45

dd/MM/yyyy hh_mm_ss a → 26/03/2025 06:30 PM

EEE, MMM dd, yyyy → Wed, Mar 26, 2025

Notes:

Case Sensitivity: Patterns like MM (month) vs mm (minutes) are case-sensitive.

Literal Text: Use single quotes to escape text:

-------------------------------------------------------
try-catch-finally blocks: 

In Java, the try-catch-finally construct is a fundamental mechanism for handling exceptions—unexpected events that disrupt the normal flow of a program. It comprises three primary blocks:​

1)try Block:

Contains code that might throw an exception.​

If an exception occurs within this block, the subsequent catch block(s) are examined to find a matching exception type.​

2)catch Block:

Follows the try block and handles specific exceptions thrown within the try block.​

Multiple catch blocks can be used to handle different types of exceptions.​

Each catch block specifies the exception type it can handle.​

3)finally Block:

An optional block that follows the try or catch blocks.​

Contains code that is always executed after the try and catch blocks, regardless of whether an exception was thrown or caught.​

Typically used for cleanup operations, such as closing files or releasing resource
--------------------------------------------------------

Steps to integrate ExtentReport:

1)Create startReport() in the BaseClass and declare the ExtentReport extent as a global variable
Add all the common lines of code (Step 1 - Step 3)
Annotate startReport() with @BeforeSuite
2)Create stopReport() in the BaseClass and have the code
extent.flush();
Annotate with @AfterSuite
3)Create testCaseDetails() in the BAseClass and have the lines of code to create testcase and assign the details
Annotate this method with @BeforeClass
4)Replace all the hardcoded datas with some global variables
Declare some global variables as public String testName, testDescription,testAuthor, testCategory;
5)Assign all the value inside setValues() in each testcase

@BeforeSuite---startReport()
  @BeforeTest--->setValues()
    @BeforeClass--->testCaseDetails()
     @DataProvider--->sendData()
      @BeforeMethod--->precondn()
       @test---->testcases
      @AfterMethod--->postcondn()
    @AfterClass---Nil
  @AfterTest---Nil
@AfterSuite---->stopReports()-



Step 1: Create an ExtentHtmlReporter Object

Initialize the ExtentHtmlReporter with the path where the HTML report will be generated.​

  LocalDateTime localDateTime = LocalDateTime.now();
  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
  String timeStamp = localDateTime.format(formatter);
  ExtentHtmlReporter reporter = new ExtentHtmlReporter("./reports/" + timeStamp + ".html");

Step 2: Initialize the ExtentReports Object

Create an instance of ExtentReports and attach the ExtentHtmlReporter to it.​

  ExtentReports reports = new ExtentReports();
  reports.attachReporter(reporter);


Step 3: Set Up Test Details

Define the test name, description, author, and category.​


  String testName = "Your Test Name";
  String testDes = "Description of the test";
  String testAuthor = "Author Name";
  String testCategory = "Category of Test";


Step 4: Create an ExtentTest Instance

Initialize the ExtentTest object with the test details.​

  ExtentTest test = reports.createTest(testName, testDes);
  test.assignAuthor(testAuthor);
  test.assignCategory(testCategory);


Step 5: Implement the takeSnap Method

Create a method to capture a screenshot and return its filename.​
TakesScreenshot is imported 
  private int takeSnap() throws IOException {
      int ranNum = (int) (Math.random() * 999999);
      File scr = getRdriver().getScreenshotAs(OutputType.FILE);
      File des = new File("./snaps/" + ranNum + ".png");
      FileUtils.copyFile(scr, des);
      return ranNum;
  }
Step 6: Implement the reportStep Method

Create a method to log test steps with their status and attach the corresponding screenshot.​

  public void reportStep(String status, String message) throws IOException {
      int snapNumber = takeSnap();
      if (status.equalsIgnoreCase("pass")) {
          test.pass(message, MediaEntityBuilder.createScreenCaptureFromPath(".././snaps/" + snapNumber + ".png").build());
      } else {
          test.fail(message, MediaEntityBuilder.createScreenCaptureFromPath(".././snaps/" + snapNumber + ".png").build());
      }
  }
Step 7: Finalize the Report

After all tests have been executed, call the flush method to write the test information to the report.​

  reports.flush();